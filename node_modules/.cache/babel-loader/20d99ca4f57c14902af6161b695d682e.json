{"ast":null,"code":"import axios from \"axios\";\n\nconst getUserSpotify = token => {\n  return axios.get(\"https://api.spotify.com/v1/me\", {\n    headers: {\n      \"Authorization\": `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => response.data);\n};\n\nconst createUserService = userObj => {\n  // console.log(userObj)\n  return axios.post(\"http://localhost:3000/api/createUser\", userObj).then(response => response.data).catch(err => {\n    console.log(`Server Error: Unable to create new user\\nError: ${err}`);\n  });\n};\n\nconst authUser = loginFormData => {\n  return axios.post(\"/api/login\", loginFormData).then(response => response.data).catch(err => {\n    console.log(`Error when making user login: ${err}`);\n  });\n};\n\nconst searchService = (searchQuery, token) => {\n  const urlParam = new URLSearchParams({\n    query: `name:${searchQuery}`,\n    type: \"track\",\n    limit: 50\n  });\n  console.log(`From the service: https://api.spotify.com/v1/search?${urlParam}`);\n  return axios.get(`https://api.spotify.com/v1/search?${urlParam}`, {\n    headers: {\n      \"Authorization\": `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => response.data).catch(err => {\n    console.log(`Got error when searching at spotify: Error: ${err}`);\n\n    if (err.response.status === 401) {\n      console.log(`bad token`);\n    }\n  });\n};\n\nconst getNewToken = refresh_token => {\n  return axios.post(\"/api/refresh_token\", {\n    refresh_token\n  }).then(response => response.data).catch(err => {\n    console.log(`Error received from node server when it was getting token from spotify`);\n  });\n};\n\nexport { getUserSpotify, createUserService, authUser, searchService };","map":{"version":3,"sources":["/Users/rachitbartwal/Desktop/coding/MUSIC-SHARE/backend/frontend/src/services/music_services.js"],"names":["axios","getUserSpotify","token","get","headers","then","response","data","createUserService","userObj","post","catch","err","console","log","authUser","loginFormData","searchService","searchQuery","urlParam","URLSearchParams","query","type","limit","status","getNewToken","refresh_token"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9B,SACIF,KAAK,CACAG,GADL,CACS,+BADT,EAC0C;AAClCC,IAAAA,OAAO,EAAE;AACL,uBAAkB,UAASF,KAAM,EAD5B;AAEL,sBAAgB;AAFX;AADyB,GAD1C,EAOKG,IAPL,CAOUC,QAAQ,IAAEA,QAAQ,CAACC,IAP7B,CADJ;AAUH,CAXD;;AAYA,MAAMC,iBAAiB,GAAGC,OAAO,IAAI;AACjC;AACA,SACIT,KAAK,CACAU,IADL,CACU,sCADV,EACkDD,OADlD,EAEKJ,IAFL,CAEWC,QAAQ,IAAIA,QAAQ,CAACC,IAFhC,EAGKI,KAHL,CAGWC,GAAG,IAAE;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAa,mDAAkDF,GAAI,EAAnE;AACH,GALL,CADJ;AASH,CAXD;;AAYA,MAAMG,QAAQ,GAAGC,aAAa,IAAI;AAC9B,SACIhB,KAAK,CACAU,IADL,CACU,YADV,EACwBM,aADxB,EAEKX,IAFL,CAEWC,QAAQ,IAAIA,QAAQ,CAACC,IAFhC,EAGKI,KAHL,CAGYC,GAAG,IAAI;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAa,iCAAgCF,GAAI,EAAjD;AACH,GALL,CADJ;AAQH,CATD;;AAUA,MAAMK,aAAa,GAAG,CAACC,WAAD,EAAchB,KAAd,KAAwB;AAC1C,QAAMiB,QAAQ,GAAG,IAAIC,eAAJ,CAAoB;AACjCC,IAAAA,KAAK,EAAG,QAAOH,WAAY,EADM;AAEjCI,IAAAA,IAAI,EAAE,OAF2B;AAGjCC,IAAAA,KAAK,EAAE;AAH0B,GAApB,CAAjB;AAKAV,EAAAA,OAAO,CAACC,GAAR,CAAa,uDAAsDK,QAAS,EAA5E;AACA,SACInB,KAAK,CACAG,GADL,CACU,qCAAoCgB,QAAS,EADvD,EAC0D;AAClDf,IAAAA,OAAO,EAAE;AACL,uBAAkB,UAASF,KAAM,EAD5B;AAEL,sBAAgB;AAFX;AADyC,GAD1D,EAOKG,IAPL,CAOUC,QAAQ,IAAEA,QAAQ,CAACC,IAP7B,EAQKI,KARL,CAQWC,GAAG,IAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAa,+CAA8CF,GAAI,EAA/D;;AACA,QAAGA,GAAG,CAACN,QAAJ,CAAakB,MAAb,KAAwB,GAA3B,EAA+B;AAC3BX,MAAAA,OAAO,CAACC,GAAR,CAAa,WAAb;AACH;AACJ,GAbL,CADJ;AAgBH,CAvBD;;AAwBA,MAAMW,WAAW,GAAIC,aAAD,IAAmB;AACnC,SACI1B,KAAK,CACAU,IADL,CACU,oBADV,EACgC;AACxBgB,IAAAA;AADwB,GADhC,EAIKrB,IAJL,CAIWC,QAAQ,IAAIA,QAAQ,CAACC,IAJhC,EAKKI,KALL,CAKYC,GAAG,IAAI;AACXC,IAAAA,OAAO,CAACC,GAAR,CAAa,wEAAb;AACH,GAPL,CADJ;AAUH,CAXD;;AAYA,SAAQb,cAAR,EAAwBO,iBAAxB,EAA2CO,QAA3C,EAAqDE,aAArD","sourcesContent":["import axios from \"axios\"\n\nconst getUserSpotify = (token) => {\n    return(\n        axios\n            .get(\"https://api.spotify.com/v1/me\", {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n            .then(response=>response.data)\n    )\n}\nconst createUserService = userObj => {\n    // console.log(userObj)\n    return(\n        axios\n            .post(\"http://localhost:3000/api/createUser\", userObj)\n            .then( response => response.data)\n            .catch(err=>{\n                console.log(`Server Error: Unable to create new user\\nError: ${err}`)\n            })\n            \n    )\n}\nconst authUser = loginFormData => {\n    return(\n        axios\n            .post(\"/api/login\", loginFormData)\n            .then( response => response.data)\n            .catch( err => {\n                console.log(`Error when making user login: ${err}`)\n            })\n    )    \n}\nconst searchService = (searchQuery, token) => {\n    const urlParam = new URLSearchParams({\n        query: `name:${searchQuery}`,\n        type: \"track\",\n        limit: 50\n    })\n    console.log(`From the service: https://api.spotify.com/v1/search?${urlParam}`)\n    return(\n        axios\n            .get(`https://api.spotify.com/v1/search?${urlParam}`, {\n                headers: {\n                    \"Authorization\": `Bearer ${token}`,\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n            .then(response=>response.data)\n            .catch(err => {\n                console.log(`Got error when searching at spotify: Error: ${err}`)\n                if(err.response.status === 401){\n                    console.log(`bad token`)\n                }\n            })\n    )\n}\nconst getNewToken = (refresh_token) => {\n    return(\n        axios\n            .post(\"/api/refresh_token\", {\n                refresh_token\n            })\n            .then( response => response.data)\n            .catch( err => {\n                console.log(`Error received from node server when it was getting token from spotify`)\n            })\n    )\n}\nexport {getUserSpotify, createUserService, authUser, searchService}"]},"metadata":{},"sourceType":"module"}