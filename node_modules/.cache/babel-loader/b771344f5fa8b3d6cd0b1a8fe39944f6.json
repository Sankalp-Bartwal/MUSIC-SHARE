{"ast":null,"code":"var _jsxFileName = \"/Users/rachitbartwal/Desktop/coding/MUSIC-SHARE/backend/frontend/src/components/genreList.js\",\n    _s = $RefreshSig$();\n\nimport { getGenres, getGenreTracks } from \"../services/music_services\";\nimport GenreCard from \"./genreCard\";\nimport { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./genreList.css\";\nimport { changeGenre } from \"../reducers/musicReducers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GenreList = _ref => {\n  _s();\n\n  let {} = _ref;\n  const [genreList, setGenreList] = useState([]);\n  const token = useSelector(state => state.user.token);\n\n  const onGenreChange = event => {\n    getGenreTracks(token, event.target.value).then(response => {\n      //console.log(`GenreTracks: ${JSON.stringify(response)}`)\n      changeGenre({\n        genre: event.target.value,\n        tracks: response.tracks\n      });\n    });\n  };\n\n  useEffect(() => {\n    if (token) {\n      getGenres(token).then(genres => {\n        console.log(JSON.stringify(genres));\n        setGenreList(genres.genres);\n      });\n    } else {\n      console.log(\"Token = None . In genre List\");\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"genreList\",\n      children: genreList.map(genre => /*#__PURE__*/_jsxDEV(GenreCard, {\n        genre: genre,\n        onGenreChange: onGenreChange\n      }, genre, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 40\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(GenreList, \"gCMpUcnWdkvn1m0lwB3XK+T2qTU=\", false, function () {\n  return [useSelector];\n});\n\n_c = GenreList;\nexport default GenreList;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreList\");","map":{"version":3,"sources":["/Users/rachitbartwal/Desktop/coding/MUSIC-SHARE/backend/frontend/src/components/genreList.js"],"names":["getGenres","getGenreTracks","GenreCard","useState","useEffect","useSelector","useDispatch","changeGenre","GenreList","genreList","setGenreList","token","state","user","onGenreChange","event","target","value","then","response","genre","tracks","genres","console","log","JSON","stringify","map"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,4BAA1C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,OAAO,iBAAP;AACA,SAASC,WAAT,QAA4B,2BAA5B;;;;AAEA,MAAMC,SAAS,GAAG,QAAQ;AAAA;;AAAA,MAAP,EAAO;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAMQ,KAAK,GAAGN,WAAW,CAACO,KAAK,IAAEA,KAAK,CAACC,IAAN,CAAWF,KAAnB,CAAzB;;AAEA,QAAMG,aAAa,GAAIC,KAAD,IAAW;AAC7Bd,IAAAA,cAAc,CAACU,KAAD,EAAQI,KAAK,CAACC,MAAN,CAAaC,KAArB,CAAd,CACKC,IADL,CACWC,QAAQ,IAAE;AACb;AACAZ,MAAAA,WAAW,CAAC;AACRa,QAAAA,KAAK,EAAEL,KAAK,CAACC,MAAN,CAAaC,KADZ;AAERI,QAAAA,MAAM,EAAEF,QAAQ,CAACE;AAFT,OAAD,CAAX;AAIH,KAPL;AAQH,GATD;;AAWAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIO,KAAJ,EAAU;AACNX,MAAAA,SAAS,CAACW,KAAD,CAAT,CACKO,IADL,CACUI,MAAM,IAAI;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAZ;AACAZ,QAAAA,YAAY,CAACY,MAAM,CAACA,MAAR,CAAZ;AACH,OAJD;AAKH,KAND,MAMO;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH;AACJ,GAVQ,EAUN,CAACb,KAAD,CAVM,CAAT;AAYA,sBAAO;AAAA,2BACH;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBAEQF,SAAS,CAACkB,GAAV,CAAcP,KAAK,iBAAI,QAAC,SAAD;AAAW,QAAA,KAAK,EAAEA,KAAlB;AAAyB,QAAA,aAAa,EAAEN;AAAxC,SAA4DM,KAA5D;AAAA;AAAA;AAAA;AAAA,cAAvB;AAFR;AAAA;AAAA;AAAA;AAAA;AADG,mBAAP;AAOH,CAlCD;;GAAMZ,S;UAEYH,W;;;KAFZG,S;AAmCN,eAAeA,SAAf","sourcesContent":["import { getGenres, getGenreTracks } from \"../services/music_services\"\nimport GenreCard from \"./genreCard\"\nimport {useState, useEffect} from \"react\"\nimport {useSelector, useDispatch} from \"react-redux\"\nimport \"./genreList.css\"\nimport { changeGenre } from \"../reducers/musicReducers\"\n\nconst GenreList = ({}) => {\n    const [genreList, setGenreList] = useState([])\n    const token = useSelector(state=>state.user.token)\n\n    const onGenreChange = (event) => {\n        getGenreTracks(token, event.target.value)\n            .then( response=>{\n                //console.log(`GenreTracks: ${JSON.stringify(response)}`)\n                changeGenre({\n                    genre: event.target.value,\n                    tracks: response.tracks\n                })\n            })\n    }\n\n    useEffect(() => {\n        if (token){\n            getGenres(token)\n                .then(genres => {\n                console.log(JSON.stringify(genres))\n                setGenreList(genres.genres)\n            })\n        } else {\n            console.log(\"Token = None . In genre List\")\n        }\n    }, [token])\n    \n    return(<>\n        <div className=\"genreList\">\n            {\n                genreList.map(genre => <GenreCard genre={genre} onGenreChange={onGenreChange} key={genre}/>)\n            }            \n        </div>\n    </>)\n}\nexport default GenreList"]},"metadata":{},"sourceType":"module"}